// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hexiaopi/data-space/internal/store (interfaces: Factory,UserStore,RoleStore,MenuStore,DepartmentStore,LoginLogStore)

// Package store is a generated GoMock package.
package store

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/hexiaopi/data-space/internal/model"
)

// MockFactory is a mock of Factory interface.
type MockFactory struct {
	ctrl     *gomock.Controller
	recorder *MockFactoryMockRecorder
}

// MockFactoryMockRecorder is the mock recorder for MockFactory.
type MockFactoryMockRecorder struct {
	mock *MockFactory
}

// NewMockFactory creates a new mock instance.
func NewMockFactory(ctrl *gomock.Controller) *MockFactory {
	mock := &MockFactory{ctrl: ctrl}
	mock.recorder = &MockFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFactory) EXPECT() *MockFactoryMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockFactory) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockFactoryMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockFactory)(nil).Close))
}

// Departments mocks base method.
func (m *MockFactory) Departments() DepartmentStore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Departments")
	ret0, _ := ret[0].(DepartmentStore)
	return ret0
}

// Departments indicates an expected call of Departments.
func (mr *MockFactoryMockRecorder) Departments() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Departments", reflect.TypeOf((*MockFactory)(nil).Departments))
}

// LoginLogs mocks base method.
func (m *MockFactory) LoginLogs() LoginLogStore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginLogs")
	ret0, _ := ret[0].(LoginLogStore)
	return ret0
}

// LoginLogs indicates an expected call of LoginLogs.
func (mr *MockFactoryMockRecorder) LoginLogs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginLogs", reflect.TypeOf((*MockFactory)(nil).LoginLogs))
}

// Menus mocks base method.
func (m *MockFactory) Menus() MenuStore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Menus")
	ret0, _ := ret[0].(MenuStore)
	return ret0
}

// Menus indicates an expected call of Menus.
func (mr *MockFactoryMockRecorder) Menus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Menus", reflect.TypeOf((*MockFactory)(nil).Menus))
}

// Roles mocks base method.
func (m *MockFactory) Roles() RoleStore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Roles")
	ret0, _ := ret[0].(RoleStore)
	return ret0
}

// Roles indicates an expected call of Roles.
func (mr *MockFactoryMockRecorder) Roles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Roles", reflect.TypeOf((*MockFactory)(nil).Roles))
}

// Tx mocks base method.
func (m *MockFactory) Tx(arg0 context.Context, arg1 func(context.Context, Factory) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Tx indicates an expected call of Tx.
func (mr *MockFactoryMockRecorder) Tx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tx", reflect.TypeOf((*MockFactory)(nil).Tx), arg0, arg1)
}

// Users mocks base method.
func (m *MockFactory) Users() UserStore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Users")
	ret0, _ := ret[0].(UserStore)
	return ret0
}

// Users indicates an expected call of Users.
func (mr *MockFactoryMockRecorder) Users() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Users", reflect.TypeOf((*MockFactory)(nil).Users))
}

// MockUserStore is a mock of UserStore interface.
type MockUserStore struct {
	ctrl     *gomock.Controller
	recorder *MockUserStoreMockRecorder
}

// MockUserStoreMockRecorder is the mock recorder for MockUserStore.
type MockUserStoreMockRecorder struct {
	mock *MockUserStore
}

// NewMockUserStore creates a new mock instance.
func NewMockUserStore(ctrl *gomock.Controller) *MockUserStore {
	mock := &MockUserStore{ctrl: ctrl}
	mock.recorder = &MockUserStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserStore) EXPECT() *MockUserStoreMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockUserStore) Count(arg0 context.Context, arg1 ...Option) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Count", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockUserStoreMockRecorder) Count(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockUserStore)(nil).Count), varargs...)
}

// Create mocks base method.
func (m *MockUserStore) Create(arg0 context.Context, arg1 *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserStoreMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserStore)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockUserStore) Delete(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserStoreMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserStore)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockUserStore) Get(arg0 context.Context, arg1 ...Option) (*model.User, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUserStoreMockRecorder) Get(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUserStore)(nil).Get), varargs...)
}

// List mocks base method.
func (m *MockUserStore) List(arg0 context.Context, arg1 ...Option) ([]model.User, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockUserStoreMockRecorder) List(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockUserStore)(nil).List), varargs...)
}

// Update mocks base method.
func (m *MockUserStore) Update(arg0 context.Context, arg1 *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserStoreMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserStore)(nil).Update), arg0, arg1)
}

// MockRoleStore is a mock of RoleStore interface.
type MockRoleStore struct {
	ctrl     *gomock.Controller
	recorder *MockRoleStoreMockRecorder
}

// MockRoleStoreMockRecorder is the mock recorder for MockRoleStore.
type MockRoleStoreMockRecorder struct {
	mock *MockRoleStore
}

// NewMockRoleStore creates a new mock instance.
func NewMockRoleStore(ctrl *gomock.Controller) *MockRoleStore {
	mock := &MockRoleStore{ctrl: ctrl}
	mock.recorder = &MockRoleStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoleStore) EXPECT() *MockRoleStoreMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockRoleStore) Count(arg0 context.Context, arg1 ...Option) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Count", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockRoleStoreMockRecorder) Count(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockRoleStore)(nil).Count), varargs...)
}

// Create mocks base method.
func (m *MockRoleStore) Create(arg0 context.Context, arg1 *model.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRoleStoreMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRoleStore)(nil).Create), arg0, arg1)
}

// CreateMenus mocks base method.
func (m *MockRoleStore) CreateMenus(arg0 context.Context, arg1 int64, arg2 ...int64) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMenus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMenus indicates an expected call of CreateMenus.
func (mr *MockRoleStoreMockRecorder) CreateMenus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMenus", reflect.TypeOf((*MockRoleStore)(nil).CreateMenus), varargs...)
}

// Delete mocks base method.
func (m *MockRoleStore) Delete(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRoleStoreMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRoleStore)(nil).Delete), arg0, arg1)
}

// DeleteMenus mocks base method.
func (m *MockRoleStore) DeleteMenus(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMenus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMenus indicates an expected call of DeleteMenus.
func (mr *MockRoleStoreMockRecorder) DeleteMenus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMenus", reflect.TypeOf((*MockRoleStore)(nil).DeleteMenus), arg0, arg1)
}

// Get mocks base method.
func (m *MockRoleStore) Get(arg0 context.Context, arg1 ...Option) (*model.Role, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*model.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRoleStoreMockRecorder) Get(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRoleStore)(nil).Get), varargs...)
}

// List mocks base method.
func (m *MockRoleStore) List(arg0 context.Context, arg1 ...Option) ([]model.Role, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]model.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockRoleStoreMockRecorder) List(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRoleStore)(nil).List), varargs...)
}

// ListUserRoles mocks base method.
func (m *MockRoleStore) ListUserRoles(arg0 context.Context, arg1 int64, arg2 ...Option) ([]model.Role, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUserRoles", varargs...)
	ret0, _ := ret[0].([]model.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserRoles indicates an expected call of ListUserRoles.
func (mr *MockRoleStoreMockRecorder) ListUserRoles(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserRoles", reflect.TypeOf((*MockRoleStore)(nil).ListUserRoles), varargs...)
}

// Update mocks base method.
func (m *MockRoleStore) Update(arg0 context.Context, arg1 *model.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRoleStoreMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRoleStore)(nil).Update), arg0, arg1)
}

// MockMenuStore is a mock of MenuStore interface.
type MockMenuStore struct {
	ctrl     *gomock.Controller
	recorder *MockMenuStoreMockRecorder
}

// MockMenuStoreMockRecorder is the mock recorder for MockMenuStore.
type MockMenuStoreMockRecorder struct {
	mock *MockMenuStore
}

// NewMockMenuStore creates a new mock instance.
func NewMockMenuStore(ctrl *gomock.Controller) *MockMenuStore {
	mock := &MockMenuStore{ctrl: ctrl}
	mock.recorder = &MockMenuStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMenuStore) EXPECT() *MockMenuStoreMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMenuStore) Create(arg0 context.Context, arg1 *model.Menu) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockMenuStoreMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMenuStore)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockMenuStore) Delete(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMenuStoreMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMenuStore)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockMenuStore) Get(arg0 context.Context, arg1 ...Option) (*model.Menu, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*model.Menu)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockMenuStoreMockRecorder) Get(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMenuStore)(nil).Get), varargs...)
}

// List mocks base method.
func (m *MockMenuStore) List(arg0 context.Context, arg1 ...Option) ([]model.Menu, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]model.Menu)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockMenuStoreMockRecorder) List(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockMenuStore)(nil).List), varargs...)
}

// ListRoleMenus mocks base method.
func (m *MockMenuStore) ListRoleMenus(arg0 context.Context, arg1 int64, arg2 ...Option) ([]model.Menu, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRoleMenus", varargs...)
	ret0, _ := ret[0].([]model.Menu)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoleMenus indicates an expected call of ListRoleMenus.
func (mr *MockMenuStoreMockRecorder) ListRoleMenus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoleMenus", reflect.TypeOf((*MockMenuStore)(nil).ListRoleMenus), varargs...)
}

// Update mocks base method.
func (m *MockMenuStore) Update(arg0 context.Context, arg1 *model.Menu) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockMenuStoreMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMenuStore)(nil).Update), arg0, arg1)
}

// MockDepartmentStore is a mock of DepartmentStore interface.
type MockDepartmentStore struct {
	ctrl     *gomock.Controller
	recorder *MockDepartmentStoreMockRecorder
}

// MockDepartmentStoreMockRecorder is the mock recorder for MockDepartmentStore.
type MockDepartmentStoreMockRecorder struct {
	mock *MockDepartmentStore
}

// NewMockDepartmentStore creates a new mock instance.
func NewMockDepartmentStore(ctrl *gomock.Controller) *MockDepartmentStore {
	mock := &MockDepartmentStore{ctrl: ctrl}
	mock.recorder = &MockDepartmentStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDepartmentStore) EXPECT() *MockDepartmentStoreMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockDepartmentStore) Count(arg0 context.Context, arg1 ...Option) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Count", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockDepartmentStoreMockRecorder) Count(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockDepartmentStore)(nil).Count), varargs...)
}

// Create mocks base method.
func (m *MockDepartmentStore) Create(arg0 context.Context, arg1 *model.Department) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockDepartmentStoreMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDepartmentStore)(nil).Create), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockDepartmentStore) CreateUser(arg0 context.Context, arg1, arg2 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockDepartmentStoreMockRecorder) CreateUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockDepartmentStore)(nil).CreateUser), arg0, arg1, arg2)
}

// Delete mocks base method.
func (m *MockDepartmentStore) Delete(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDepartmentStoreMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDepartmentStore)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockDepartmentStore) Get(arg0 context.Context, arg1 ...Option) (*model.Department, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*model.Department)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDepartmentStoreMockRecorder) Get(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDepartmentStore)(nil).Get), varargs...)
}

// List mocks base method.
func (m *MockDepartmentStore) List(arg0 context.Context, arg1 ...Option) ([]model.Department, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]model.Department)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockDepartmentStoreMockRecorder) List(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockDepartmentStore)(nil).List), varargs...)
}

// Update mocks base method.
func (m *MockDepartmentStore) Update(arg0 context.Context, arg1 *model.Department) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockDepartmentStoreMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDepartmentStore)(nil).Update), arg0, arg1)
}

// MockLoginLogStore is a mock of LoginLogStore interface.
type MockLoginLogStore struct {
	ctrl     *gomock.Controller
	recorder *MockLoginLogStoreMockRecorder
}

// MockLoginLogStoreMockRecorder is the mock recorder for MockLoginLogStore.
type MockLoginLogStoreMockRecorder struct {
	mock *MockLoginLogStore
}

// NewMockLoginLogStore creates a new mock instance.
func NewMockLoginLogStore(ctrl *gomock.Controller) *MockLoginLogStore {
	mock := &MockLoginLogStore{ctrl: ctrl}
	mock.recorder = &MockLoginLogStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoginLogStore) EXPECT() *MockLoginLogStoreMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockLoginLogStore) Create(arg0 context.Context, arg1 *model.LoginLog) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockLoginLogStoreMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockLoginLogStore)(nil).Create), arg0, arg1)
}
